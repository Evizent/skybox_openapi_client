# coding: utf-8

"""
    SkyBox API

    The SkyBox APIs allow our users to create, update, delete, and export information within the SkyBox platform. These APIs allow SkyBox to be extensible, giving you the flexibility to grow, develop, and integrate third-party tooling to help scale out your business. To begin using the SkyBox APIs, you will need to generate two unique tokens: an Application_Token and an API Token.  To request a unique Application_Token, click here (<a href='https://skybox.vividseats.com/application-sign-up'>https://skybox.vividseats.com/application-sign-up</a>) and refer to this <a href='https://skybox.zendesk.com/hc/en-us/articles/6769735238043-Getting-Started-with-Skybox-APIs'>Zendesk Article</a> for detailed instructions on getting started with SkyBox APIs.  To generate an API Token when logged in to SkyBox, click on the drop-down under 'Logged In As:', select 'External Accounts', and then select 'API Invitation +'. A modal will appear and you will be prompted to enter the email address to which you want the token sent as well as to provide a brief description of the account.  Once you have both your Application_Token and API Token, there are two ways in which you can make requests: through the UI and through a third party. See below for detailed steps for each process.  Requests through the UI:  To begin, enter your Account ID in the X-Account field. Once complete, select _Authorize_. Next, enter your API Token in the X-Api-Token field. If you do not currently have an API Token, please follow the steps above to request one. Once complete, select _Authorize_. Last, enter your Application_Token in the X-Application-Token field. If you do not have an Application_Token, a sample is provided or you can follow the link above to request one. Once complete, select _Authorize_.  Requests through a third party (i.e. Postman):  The same information is required as it is through the UI, but it will be passed in through headers. It should look something like this:  X-Account: Account ID goes here!  X-Api-Token: API Token goes here!  X-Application-Token: Application_Token goes here!  Once these three items are successfully passed in as headers, you will be able to make sample requests.  <h2><a href='https://skybox.zendesk.com/hc/en-us/articles/5999881334427-SkyBox-API-Rate-Limits'>API Rate Limits</a> </h2>  A rate limit consists of two variables: an interval and a limit. An interval is a period of time, measured in seconds. A limit is the number of calls that can be made to an endpoint in an interval.  For example, SkyBox’s ‘GET /reports/‘ endpoint has an interval of 1 second and a limit of 1 call per interval. This means that this endpoint has a rate limit of 1 call/second.  Each endpoint, and its respective rate limit, is displayed in this <a href='https://skybox.zendesk.com/hc/en-us/articles/5999881334427-SkyBox-API-Rate-Limits'>Support Article</a>. If the endpoint is not listed, its rate limit is the default, indicated by the ‘*’ at the bottom of the table. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BulkInventoryUpdateRequest(BaseModel):
    """
    BulkInventoryUpdateRequest
    """ # noqa: E501
    inventory_ids: List[StrictInt] = Field(description="Inventory id's which will be update.", alias="inventoryIds")
    public_notes_to_replace: Optional[StrictStr] = Field(default=None, description="New public notes.", alias="publicNotesToReplace")
    public_notes_to_add: Optional[StrictStr] = Field(default=None, description="Public notes to add to existing notes.", alias="publicNotesToAdd")
    internal_notes_to_replace: Optional[StrictStr] = Field(default=None, description="New internal notes.", alias="internalNotesToReplace")
    internal_notes_to_add: Optional[StrictStr] = Field(default=None, description="Internal notes to add to existing notes.", alias="internalNotesToAdd")
    split_type: Optional[StrictStr] = Field(default=None, description="Split type to update", alias="splitType")
    custom_split: Optional[StrictStr] = Field(default=None, description="Valid split quantities", alias="customSplit")
    seat_type: Optional[StrictStr] = Field(default=None, description="Seat type to update", alias="seatType")
    in_hand_days_before_event: Optional[StrictInt] = Field(default=None, description="In-hand days before event to update", alias="inHandDaysBeforeEvent")
    stock_type: Optional[StrictStr] = Field(default=None, description="Stock type to update", alias="stockType")
    zone_seating: Optional[StrictBool] = Field(default=None, description="Zone seating", alias="zoneSeating")
    hide_seat_numbers: Optional[StrictBool] = Field(default=None, description="Hide seat numbers", alias="hideSeatNumbers")
    friendly_section: Optional[StrictStr] = Field(default=None, description="Friendly Section", alias="friendlySection")
    section: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=51)]] = Field(default=None, description="Section")
    friendly_row: Optional[StrictStr] = Field(default=None, description="Friendly Row", alias="friendlyRow")
    row: Optional[StrictStr] = Field(default=None, description="Row")
    remove_barcode: Optional[StrictBool] = Field(default=None, description="Barcodes should be removed", alias="removeBarcode")
    remove_pdf: Optional[StrictBool] = Field(default=None, description="Whether pdfs should be removed", alias="removePdf")
    remove_external_ticket_id: Optional[StrictBool] = Field(default=None, description="Whether external ticket IDs should be removed", alias="removeExternalTicketId")
    ticket_disclosure: Optional[StrictStr] = Field(default=None, description="Ticket disclosure to update", alias="ticketDisclosure")
    inventory_attribute: Optional[StrictStr] = Field(default=None, description="Inventory attribute to update", alias="inventoryAttribute")
    face_value: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Amount to set to each ticket's face value", alias="faceValue")
    opt_out_auto_price: Optional[StrictBool] = Field(default=None, description="Opt-out auto-price", alias="optOutAutoPrice")
    broadcast: Optional[StrictBool] = Field(default=None, description="Broadcast to exchanges")
    electronic_transfer: Optional[StrictBool] = Field(default=None, description="Electronic transfer to set", alias="electronicTransfer")
    no_split: Optional[StrictBool] = Field(default=None, description="Whether split type is full quantity (no splits)", alias="noSplit")
    received: Optional[StrictBool] = Field(default=None, description="Received status to be set to the purchases of the inventories.")
    vsr_option: Optional[StrictStr] = Field(default=None, description="VSR option", alias="vsrOption")
    replenishment_group_id: Optional[StrictInt] = Field(default=None, alias="replenishmentGroupId")
    clear_disclosures: Optional[StrictBool] = Field(default=None, alias="clearDisclosures")
    clear_attributes: Optional[StrictBool] = Field(default=None, alias="clearAttributes")
    shown_quantity: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="shownQuantity")
    force: Optional[StrictBool] = None
    instant_transfer: Optional[StrictBool] = Field(default=None, description="Received instant transfer value to be set to the inventories.", alias="instantTransfer")
    instant_transfer_opted_out: Optional[StrictBool] = Field(default=None, description="Received instant transfer Opted Out value to be set to the inventories.", alias="instantTransferOptedOut")
    integrated_listing: Optional[StrictBool] = Field(default=None, alias="integratedListing")
    in_hand_date: Optional[date] = Field(default=None, description="In-hand date to update", alias="inHandDate")
    __properties: ClassVar[List[str]] = ["inventoryIds", "publicNotesToReplace", "publicNotesToAdd", "internalNotesToReplace", "internalNotesToAdd", "splitType", "customSplit", "seatType", "inHandDaysBeforeEvent", "stockType", "zoneSeating", "hideSeatNumbers", "friendlySection", "section", "friendlyRow", "row", "removeBarcode", "removePdf", "removeExternalTicketId", "ticketDisclosure", "inventoryAttribute", "faceValue", "optOutAutoPrice", "broadcast", "electronicTransfer", "noSplit", "received", "vsrOption", "replenishmentGroupId", "clearDisclosures", "clearAttributes", "shownQuantity", "force", "instantTransfer", "instantTransferOptedOut", "integratedListing", "inHandDate"]

    @field_validator('split_type')
    def split_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'ANY', 'CUSTOM', 'NEVERLEAVEONE']):
            raise ValueError("must be one of enum values ('DEFAULT', 'ANY', 'CUSTOM', 'NEVERLEAVEONE')")
        return value

    @field_validator('seat_type')
    def seat_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSECUTIVE', 'ALTERNATING', 'GA', 'PIGGYBACK']):
            raise ValueError("must be one of enum values ('CONSECUTIVE', 'ALTERNATING', 'GA', 'PIGGYBACK')")
        return value

    @field_validator('stock_type')
    def stock_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HARD', 'ELECTRONIC', 'FLASH', 'PAPERLESS', 'PAPERLESS_CARD', 'MOBILE_TRANSFER', 'MOBILE_SCREENCAP']):
            raise ValueError("must be one of enum values ('HARD', 'ELECTRONIC', 'FLASH', 'PAPERLESS', 'PAPERLESS_CARD', 'MOBILE_TRANSFER', 'MOBILE_SCREENCAP')")
        return value

    @field_validator('vsr_option')
    def vsr_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'EVENT_INVENTORY', 'OTHER', 'NONE']):
            raise ValueError("must be one of enum values ('ALL', 'EVENT_INVENTORY', 'OTHER', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkInventoryUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkInventoryUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inventoryIds": obj.get("inventoryIds"),
            "publicNotesToReplace": obj.get("publicNotesToReplace"),
            "publicNotesToAdd": obj.get("publicNotesToAdd"),
            "internalNotesToReplace": obj.get("internalNotesToReplace"),
            "internalNotesToAdd": obj.get("internalNotesToAdd"),
            "splitType": obj.get("splitType"),
            "customSplit": obj.get("customSplit"),
            "seatType": obj.get("seatType"),
            "inHandDaysBeforeEvent": obj.get("inHandDaysBeforeEvent"),
            "stockType": obj.get("stockType"),
            "zoneSeating": obj.get("zoneSeating"),
            "hideSeatNumbers": obj.get("hideSeatNumbers"),
            "friendlySection": obj.get("friendlySection"),
            "section": obj.get("section"),
            "friendlyRow": obj.get("friendlyRow"),
            "row": obj.get("row"),
            "removeBarcode": obj.get("removeBarcode"),
            "removePdf": obj.get("removePdf"),
            "removeExternalTicketId": obj.get("removeExternalTicketId"),
            "ticketDisclosure": obj.get("ticketDisclosure"),
            "inventoryAttribute": obj.get("inventoryAttribute"),
            "faceValue": obj.get("faceValue"),
            "optOutAutoPrice": obj.get("optOutAutoPrice"),
            "broadcast": obj.get("broadcast"),
            "electronicTransfer": obj.get("electronicTransfer"),
            "noSplit": obj.get("noSplit"),
            "received": obj.get("received"),
            "vsrOption": obj.get("vsrOption"),
            "replenishmentGroupId": obj.get("replenishmentGroupId"),
            "clearDisclosures": obj.get("clearDisclosures"),
            "clearAttributes": obj.get("clearAttributes"),
            "shownQuantity": obj.get("shownQuantity"),
            "force": obj.get("force"),
            "instantTransfer": obj.get("instantTransfer"),
            "instantTransferOptedOut": obj.get("instantTransferOptedOut"),
            "integratedListing": obj.get("integratedListing"),
            "inHandDate": obj.get("inHandDate")
        })
        return _obj


