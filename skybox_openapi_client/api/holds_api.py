# coding: utf-8

"""
    SkyBox API

    The SkyBox APIs allow our users to create, update, delete, and export information within the SkyBox platform. These APIs allow SkyBox to be extensible, giving you the flexibility to grow, develop, and integrate third-party tooling to help scale out your business. To begin using the SkyBox APIs, you will need to generate two unique tokens: an Application_Token and an API Token.  To request a unique Application_Token, click here (<a href='https://skybox.vividseats.com/application-sign-up'>https://skybox.vividseats.com/application-sign-up</a>) and refer to this <a href='https://skybox.zendesk.com/hc/en-us/articles/6769735238043-Getting-Started-with-Skybox-APIs'>Zendesk Article</a> for detailed instructions on getting started with SkyBox APIs.  To generate an API Token when logged in to SkyBox, click on the drop-down under 'Logged In As:', select 'External Accounts', and then select 'API Invitation +'. A modal will appear and you will be prompted to enter the email address to which you want the token sent as well as to provide a brief description of the account.  Once you have both your Application_Token and API Token, there are two ways in which you can make requests: through the UI and through a third party. See below for detailed steps for each process.  Requests through the UI:  To begin, enter your Account ID in the X-Account field. Once complete, select _Authorize_. Next, enter your API Token in the X-Api-Token field. If you do not currently have an API Token, please follow the steps above to request one. Once complete, select _Authorize_. Last, enter your Application_Token in the X-Application-Token field. If you do not have an Application_Token, a sample is provided or you can follow the link above to request one. Once complete, select _Authorize_.  Requests through a third party (i.e. Postman):  The same information is required as it is through the UI, but it will be passed in through headers. It should look something like this:  X-Account: Account ID goes here!  X-Api-Token: API Token goes here!  X-Application-Token: Application_Token goes here!  Once these three items are successfully passed in as headers, you will be able to make sample requests.  <h2><a href='https://skybox.zendesk.com/hc/en-us/articles/5999881334427-SkyBox-API-Rate-Limits'>API Rate Limits</a> </h2>  A rate limit consists of two variables: an interval and a limit. An interval is a period of time, measured in seconds. A limit is the number of calls that can be made to an endpoint in an interval.  For example, SkyBox’s ‘GET /reports/‘ endpoint has an interval of 1 second and a limit of 1 call per interval. This means that this endpoint has a rate limit of 1 call/second.  Each endpoint, and its respective rate limit, is displayed in this <a href='https://skybox.zendesk.com/hc/en-us/articles/5999881334427-SkyBox-API-Rate-Limits'>Support Article</a>. If the endpoint is not listed, its rate limit is the default, indicated by the ‘*’ at the bottom of the table. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from skybox_openapi_client.models.hold import Hold
from skybox_openapi_client.models.hold_request import HoldRequest
from skybox_openapi_client.models.hold_summary import HoldSummary

from skybox_openapi_client.api_client import ApiClient, RequestSerialized
from skybox_openapi_client.api_response import ApiResponse
from skybox_openapi_client.rest import RESTResponseType


class HoldsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def holds_delete_by_id(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Hold:
        """holds_delete_by_id

        Deletes a hold by the hold id

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_delete_by_id_serialize(
            hold_id=hold_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def holds_delete_by_id_with_http_info(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Hold]:
        """holds_delete_by_id

        Deletes a hold by the hold id

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_delete_by_id_serialize(
            hold_id=hold_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def holds_delete_by_id_without_preload_content(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """holds_delete_by_id

        Deletes a hold by the hold id

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_delete_by_id_serialize(
            hold_id=hold_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _holds_delete_by_id_serialize(
        self,
        hold_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hold_id is not None:
            _path_params['hold-id'] = hold_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Account', 
            'Authorization_Token', 
            'Application_Token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/holds/{hold-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def holds_get_by_id(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Hold:
        """holds_get_by_id

        Retrieves a hold by the hold id

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_get_by_id_serialize(
            hold_id=hold_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def holds_get_by_id_with_http_info(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Hold]:
        """holds_get_by_id

        Retrieves a hold by the hold id

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_get_by_id_serialize(
            hold_id=hold_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def holds_get_by_id_without_preload_content(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """holds_get_by_id

        Retrieves a hold by the hold id

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_get_by_id_serialize(
            hold_id=hold_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _holds_get_by_id_serialize(
        self,
        hold_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hold_id is not None:
            _path_params['hold-id'] = hold_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Account', 
            'Authorization_Token', 
            'Application_Token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/holds/{hold-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def holds_insert(
        self,
        hold_request: Annotated[HoldRequest, Field(description="A hold request to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Hold:
        """holds_insert

        Creates a hold

        :param hold_request: A hold request to create. (required)
        :type hold_request: HoldRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_insert_serialize(
            hold_request=hold_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def holds_insert_with_http_info(
        self,
        hold_request: Annotated[HoldRequest, Field(description="A hold request to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Hold]:
        """holds_insert

        Creates a hold

        :param hold_request: A hold request to create. (required)
        :type hold_request: HoldRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_insert_serialize(
            hold_request=hold_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def holds_insert_without_preload_content(
        self,
        hold_request: Annotated[HoldRequest, Field(description="A hold request to create.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """holds_insert

        Creates a hold

        :param hold_request: A hold request to create. (required)
        :type hold_request: HoldRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_insert_serialize(
            hold_request=hold_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _holds_insert_serialize(
        self,
        hold_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if hold_request is not None:
            _body_params = hold_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Account', 
            'Authorization_Token', 
            'Application_Token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/holds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def holds_search(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results per page")] = None,
        sort_dir: Annotated[Optional[StrictStr], Field(description="Direction to sort")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number of results to show")] = None,
        id: Annotated[Optional[StrictInt], Field(description="Id to filter")] = None,
        inventory_id: Annotated[Optional[StrictInt], Field(description="Inventory Id to filter")] = None,
        exchange_pos_id: Annotated[Optional[List[StrictInt]], Field(description="Exchange pos Id filter")] = None,
        event: Annotated[Optional[StrictStr], Field(description="Event to filter")] = None,
        venue_id: Annotated[Optional[StrictInt], Field(description="Venue Id filter")] = None,
        venue: Annotated[Optional[StrictStr], Field(description="Venue filter")] = None,
        user: Annotated[Optional[StrictStr], Field(description="User filter")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="User id filter")] = None,
        event_date_from: Annotated[Optional[datetime], Field(description="From event date filter")] = None,
        event_date_to: Annotated[Optional[datetime], Field(description="To event date filter")] = None,
        created_date_from: Annotated[Optional[datetime], Field(description="From created date filter")] = None,
        created_date_to: Annotated[Optional[datetime], Field(description="To created date filter")] = None,
        expiry_date_from: Annotated[Optional[datetime], Field(description="From expiry date filter")] = None,
        expiry_date_to: Annotated[Optional[datetime], Field(description="To expiry date filter")] = None,
        external_ref: Annotated[Optional[List[StrictStr]], Field(description="External reference to filter")] = None,
        customer_id: Annotated[Optional[StrictInt], Field(description="Category Id filter")] = None,
        sorted_by: Annotated[Optional[StrictStr], Field(description="Field to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[HoldSummary]:
        """holds_search

        Retrieves all holds

        :param limit: Number of results per page
        :type limit: int
        :param sort_dir: Direction to sort
        :type sort_dir: str
        :param page_number: Page number of results to show
        :type page_number: int
        :param id: Id to filter
        :type id: int
        :param inventory_id: Inventory Id to filter
        :type inventory_id: int
        :param exchange_pos_id: Exchange pos Id filter
        :type exchange_pos_id: List[int]
        :param event: Event to filter
        :type event: str
        :param venue_id: Venue Id filter
        :type venue_id: int
        :param venue: Venue filter
        :type venue: str
        :param user: User filter
        :type user: str
        :param user_id: User id filter
        :type user_id: str
        :param event_date_from: From event date filter
        :type event_date_from: datetime
        :param event_date_to: To event date filter
        :type event_date_to: datetime
        :param created_date_from: From created date filter
        :type created_date_from: datetime
        :param created_date_to: To created date filter
        :type created_date_to: datetime
        :param expiry_date_from: From expiry date filter
        :type expiry_date_from: datetime
        :param expiry_date_to: To expiry date filter
        :type expiry_date_to: datetime
        :param external_ref: External reference to filter
        :type external_ref: List[str]
        :param customer_id: Category Id filter
        :type customer_id: int
        :param sorted_by: Field to sort by
        :type sorted_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_search_serialize(
            limit=limit,
            sort_dir=sort_dir,
            page_number=page_number,
            id=id,
            inventory_id=inventory_id,
            exchange_pos_id=exchange_pos_id,
            event=event,
            venue_id=venue_id,
            venue=venue,
            user=user,
            user_id=user_id,
            event_date_from=event_date_from,
            event_date_to=event_date_to,
            created_date_from=created_date_from,
            created_date_to=created_date_to,
            expiry_date_from=expiry_date_from,
            expiry_date_to=expiry_date_to,
            external_ref=external_ref,
            customer_id=customer_id,
            sorted_by=sorted_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HoldSummary]",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def holds_search_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results per page")] = None,
        sort_dir: Annotated[Optional[StrictStr], Field(description="Direction to sort")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number of results to show")] = None,
        id: Annotated[Optional[StrictInt], Field(description="Id to filter")] = None,
        inventory_id: Annotated[Optional[StrictInt], Field(description="Inventory Id to filter")] = None,
        exchange_pos_id: Annotated[Optional[List[StrictInt]], Field(description="Exchange pos Id filter")] = None,
        event: Annotated[Optional[StrictStr], Field(description="Event to filter")] = None,
        venue_id: Annotated[Optional[StrictInt], Field(description="Venue Id filter")] = None,
        venue: Annotated[Optional[StrictStr], Field(description="Venue filter")] = None,
        user: Annotated[Optional[StrictStr], Field(description="User filter")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="User id filter")] = None,
        event_date_from: Annotated[Optional[datetime], Field(description="From event date filter")] = None,
        event_date_to: Annotated[Optional[datetime], Field(description="To event date filter")] = None,
        created_date_from: Annotated[Optional[datetime], Field(description="From created date filter")] = None,
        created_date_to: Annotated[Optional[datetime], Field(description="To created date filter")] = None,
        expiry_date_from: Annotated[Optional[datetime], Field(description="From expiry date filter")] = None,
        expiry_date_to: Annotated[Optional[datetime], Field(description="To expiry date filter")] = None,
        external_ref: Annotated[Optional[List[StrictStr]], Field(description="External reference to filter")] = None,
        customer_id: Annotated[Optional[StrictInt], Field(description="Category Id filter")] = None,
        sorted_by: Annotated[Optional[StrictStr], Field(description="Field to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[HoldSummary]]:
        """holds_search

        Retrieves all holds

        :param limit: Number of results per page
        :type limit: int
        :param sort_dir: Direction to sort
        :type sort_dir: str
        :param page_number: Page number of results to show
        :type page_number: int
        :param id: Id to filter
        :type id: int
        :param inventory_id: Inventory Id to filter
        :type inventory_id: int
        :param exchange_pos_id: Exchange pos Id filter
        :type exchange_pos_id: List[int]
        :param event: Event to filter
        :type event: str
        :param venue_id: Venue Id filter
        :type venue_id: int
        :param venue: Venue filter
        :type venue: str
        :param user: User filter
        :type user: str
        :param user_id: User id filter
        :type user_id: str
        :param event_date_from: From event date filter
        :type event_date_from: datetime
        :param event_date_to: To event date filter
        :type event_date_to: datetime
        :param created_date_from: From created date filter
        :type created_date_from: datetime
        :param created_date_to: To created date filter
        :type created_date_to: datetime
        :param expiry_date_from: From expiry date filter
        :type expiry_date_from: datetime
        :param expiry_date_to: To expiry date filter
        :type expiry_date_to: datetime
        :param external_ref: External reference to filter
        :type external_ref: List[str]
        :param customer_id: Category Id filter
        :type customer_id: int
        :param sorted_by: Field to sort by
        :type sorted_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_search_serialize(
            limit=limit,
            sort_dir=sort_dir,
            page_number=page_number,
            id=id,
            inventory_id=inventory_id,
            exchange_pos_id=exchange_pos_id,
            event=event,
            venue_id=venue_id,
            venue=venue,
            user=user,
            user_id=user_id,
            event_date_from=event_date_from,
            event_date_to=event_date_to,
            created_date_from=created_date_from,
            created_date_to=created_date_to,
            expiry_date_from=expiry_date_from,
            expiry_date_to=expiry_date_to,
            external_ref=external_ref,
            customer_id=customer_id,
            sorted_by=sorted_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HoldSummary]",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def holds_search_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results per page")] = None,
        sort_dir: Annotated[Optional[StrictStr], Field(description="Direction to sort")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number of results to show")] = None,
        id: Annotated[Optional[StrictInt], Field(description="Id to filter")] = None,
        inventory_id: Annotated[Optional[StrictInt], Field(description="Inventory Id to filter")] = None,
        exchange_pos_id: Annotated[Optional[List[StrictInt]], Field(description="Exchange pos Id filter")] = None,
        event: Annotated[Optional[StrictStr], Field(description="Event to filter")] = None,
        venue_id: Annotated[Optional[StrictInt], Field(description="Venue Id filter")] = None,
        venue: Annotated[Optional[StrictStr], Field(description="Venue filter")] = None,
        user: Annotated[Optional[StrictStr], Field(description="User filter")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="User id filter")] = None,
        event_date_from: Annotated[Optional[datetime], Field(description="From event date filter")] = None,
        event_date_to: Annotated[Optional[datetime], Field(description="To event date filter")] = None,
        created_date_from: Annotated[Optional[datetime], Field(description="From created date filter")] = None,
        created_date_to: Annotated[Optional[datetime], Field(description="To created date filter")] = None,
        expiry_date_from: Annotated[Optional[datetime], Field(description="From expiry date filter")] = None,
        expiry_date_to: Annotated[Optional[datetime], Field(description="To expiry date filter")] = None,
        external_ref: Annotated[Optional[List[StrictStr]], Field(description="External reference to filter")] = None,
        customer_id: Annotated[Optional[StrictInt], Field(description="Category Id filter")] = None,
        sorted_by: Annotated[Optional[StrictStr], Field(description="Field to sort by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """holds_search

        Retrieves all holds

        :param limit: Number of results per page
        :type limit: int
        :param sort_dir: Direction to sort
        :type sort_dir: str
        :param page_number: Page number of results to show
        :type page_number: int
        :param id: Id to filter
        :type id: int
        :param inventory_id: Inventory Id to filter
        :type inventory_id: int
        :param exchange_pos_id: Exchange pos Id filter
        :type exchange_pos_id: List[int]
        :param event: Event to filter
        :type event: str
        :param venue_id: Venue Id filter
        :type venue_id: int
        :param venue: Venue filter
        :type venue: str
        :param user: User filter
        :type user: str
        :param user_id: User id filter
        :type user_id: str
        :param event_date_from: From event date filter
        :type event_date_from: datetime
        :param event_date_to: To event date filter
        :type event_date_to: datetime
        :param created_date_from: From created date filter
        :type created_date_from: datetime
        :param created_date_to: To created date filter
        :type created_date_to: datetime
        :param expiry_date_from: From expiry date filter
        :type expiry_date_from: datetime
        :param expiry_date_to: To expiry date filter
        :type expiry_date_to: datetime
        :param external_ref: External reference to filter
        :type external_ref: List[str]
        :param customer_id: Category Id filter
        :type customer_id: int
        :param sorted_by: Field to sort by
        :type sorted_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_search_serialize(
            limit=limit,
            sort_dir=sort_dir,
            page_number=page_number,
            id=id,
            inventory_id=inventory_id,
            exchange_pos_id=exchange_pos_id,
            event=event,
            venue_id=venue_id,
            venue=venue,
            user=user,
            user_id=user_id,
            event_date_from=event_date_from,
            event_date_to=event_date_to,
            created_date_from=created_date_from,
            created_date_to=created_date_to,
            expiry_date_from=expiry_date_from,
            expiry_date_to=expiry_date_to,
            external_ref=external_ref,
            customer_id=customer_id,
            sorted_by=sorted_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[HoldSummary]",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _holds_search_serialize(
        self,
        limit,
        sort_dir,
        page_number,
        id,
        inventory_id,
        exchange_pos_id,
        event,
        venue_id,
        venue,
        user,
        user_id,
        event_date_from,
        event_date_to,
        created_date_from,
        created_date_to,
        expiry_date_from,
        expiry_date_to,
        external_ref,
        customer_id,
        sorted_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'exchangePosId': 'multi',
            'externalRef': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_dir is not None:
            
            _query_params.append(('sortDir', sort_dir))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if inventory_id is not None:
            
            _query_params.append(('inventoryId', inventory_id))
            
        if exchange_pos_id is not None:
            
            _query_params.append(('exchangePosId', exchange_pos_id))
            
        if event is not None:
            
            _query_params.append(('event', event))
            
        if venue_id is not None:
            
            _query_params.append(('venueId', venue_id))
            
        if venue is not None:
            
            _query_params.append(('venue', venue))
            
        if user is not None:
            
            _query_params.append(('user', user))
            
        if user_id is not None:
            
            _query_params.append(('userId', user_id))
            
        if event_date_from is not None:
            if isinstance(event_date_from, datetime):
                _query_params.append(
                    (
                        'eventDateFrom',
                        event_date_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eventDateFrom', event_date_from))
            
        if event_date_to is not None:
            if isinstance(event_date_to, datetime):
                _query_params.append(
                    (
                        'eventDateTo',
                        event_date_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eventDateTo', event_date_to))
            
        if created_date_from is not None:
            if isinstance(created_date_from, datetime):
                _query_params.append(
                    (
                        'createdDateFrom',
                        created_date_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdDateFrom', created_date_from))
            
        if created_date_to is not None:
            if isinstance(created_date_to, datetime):
                _query_params.append(
                    (
                        'createdDateTo',
                        created_date_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdDateTo', created_date_to))
            
        if expiry_date_from is not None:
            if isinstance(expiry_date_from, datetime):
                _query_params.append(
                    (
                        'expiryDateFrom',
                        expiry_date_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('expiryDateFrom', expiry_date_from))
            
        if expiry_date_to is not None:
            if isinstance(expiry_date_to, datetime):
                _query_params.append(
                    (
                        'expiryDateTo',
                        expiry_date_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('expiryDateTo', expiry_date_to))
            
        if external_ref is not None:
            
            _query_params.append(('externalRef', external_ref))
            
        if customer_id is not None:
            
            _query_params.append(('customerId', customer_id))
            
        if sorted_by is not None:
            
            _query_params.append(('sortedBy', sorted_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Account', 
            'Authorization_Token', 
            'Application_Token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/holds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def holds_update(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        hold: Annotated[Hold, Field(description="The hold object to update.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Hold:
        """holds_update

        Updates a hold

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param hold: The hold object to update. (required)
        :type hold: Hold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_update_serialize(
            hold_id=hold_id,
            hold=hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def holds_update_with_http_info(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        hold: Annotated[Hold, Field(description="The hold object to update.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Hold]:
        """holds_update

        Updates a hold

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param hold: The hold object to update. (required)
        :type hold: Hold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_update_serialize(
            hold_id=hold_id,
            hold=hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def holds_update_without_preload_content(
        self,
        hold_id: Annotated[StrictInt, Field(description="The id of the hold")],
        hold: Annotated[Hold, Field(description="The hold object to update.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """holds_update

        Updates a hold

        :param hold_id: The id of the hold (required)
        :type hold_id: int
        :param hold: The hold object to update. (required)
        :type hold: Hold
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._holds_update_serialize(
            hold_id=hold_id,
            hold=hold,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Hold",
            '401': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _holds_update_serialize(
        self,
        hold_id,
        hold,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hold_id is not None:
            _path_params['hold-id'] = hold_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if hold is not None:
            _body_params = hold


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Account', 
            'Authorization_Token', 
            'Application_Token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/holds/{hold-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


